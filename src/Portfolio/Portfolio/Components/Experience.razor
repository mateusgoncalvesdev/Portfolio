@using Portfolio.Data.Mapper
@inject IProfessionalExperienceService ProfessionalExperienceService

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenCard class="avoid-break" id="experiencia">
    <RadzenFieldset AllowCollapse="true" ExpandTitle="Experiência Profissional" CollapseTitle="Experiência Profissional">
        <HeaderTemplate>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                <SectionTitle Icon="work" Title="Experiência Profissional" />
            </RadzenStack>
        </HeaderTemplate>
        <ChildContent>
            @if (ProfessionalExperienceInfos == null)
            {
                <p><em>Carregando...</em></p>
            }
            else
            {
                <RadzenTimeline Orientation="Orientation.Vertical" LinePosition="LinePosition.Start">
                    <Items>
                        @foreach (var exp in ProfessionalExperienceInfos)
                        {
                            <RadzenTimelineItem PointStyle="@(exp.EndDate ==  null ?  PointStyle.Primary :  PointStyle.Base)">
                                <ChildContent>
                                    <ExperienceBlock Experience="exp" />
                                </ChildContent>
                            </RadzenTimelineItem>
                        }
                    </Items>
                </RadzenTimeline>
            }
        </ChildContent>
    </RadzenFieldset>
</RadzenCard>

@code {
    public List<ProfessionalExperienceViewModel> ProfessionalExperienceInfos { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var experiences = await ProfessionalExperienceService.GetProfessionalExperiencesAsync();
        var experiencesOrdered = experiences.OrderByDescending(x =>
            x.EndDate ?? DateTime.Now);
        ProfessionalExperienceInfos = experiencesOrdered.Select(ProfessionalExperienceMapper.MapToViewModel).ToList();
    }
}